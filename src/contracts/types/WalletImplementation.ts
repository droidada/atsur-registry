/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface WalletImplementationInterface extends utils.Interface {
  functions: {
    "celoTokenBalance()": FunctionFragment;
    "erc20TokenBalance(address)": FunctionFragment;
    "version()": FunctionFragment;
    "withdrawCeloToken(address,uint256)": FunctionFragment;
    "withdrawErc20Token(address,address,uint256)": FunctionFragment;
    "xChangeContract()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "celoTokenBalance"
      | "erc20TokenBalance"
      | "version"
      | "withdrawCeloToken"
      | "withdrawErc20Token"
      | "xChangeContract",
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "celoTokenBalance",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "erc20TokenBalance",
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawCeloToken",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawErc20Token",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: "xChangeContract",
    values?: undefined,
  ): string;

  decodeFunctionResult(
    functionFragment: "celoTokenBalance",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc20TokenBalance",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCeloToken",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawErc20Token",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "xChangeContract",
    data: BytesLike,
  ): Result;

  events: {};
}

export interface WalletImplementation extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WalletImplementationInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    celoTokenBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    erc20TokenBalance(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    version(overrides?: CallOverrides): Promise<[string]>;

    withdrawCeloToken(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdrawErc20Token(
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    xChangeContract(overrides?: CallOverrides): Promise<[string]>;
  };

  celoTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

  erc20TokenBalance(
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  version(overrides?: CallOverrides): Promise<string>;

  withdrawCeloToken(
    _to: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdrawErc20Token(
    _token: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  xChangeContract(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    celoTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

    erc20TokenBalance(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<string>;

    withdrawCeloToken(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    withdrawErc20Token(
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    xChangeContract(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    celoTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

    erc20TokenBalance(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawCeloToken(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdrawErc20Token(
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    xChangeContract(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    celoTokenBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    erc20TokenBalance(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawCeloToken(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdrawErc20Token(
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    xChangeContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
