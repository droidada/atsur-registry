/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { WalletProxy, WalletProxyInterface } from "../WalletProxy";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_xChangeContract",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "xChangeContract",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161025c38038061025c83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b6101c9806100936000396000f3fe6080604052600436106100225760003560e01c80635d80e08a1461003357610029565b3661002957005b610031610089565b005b34801561003f57600080fd5b506000546100609073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b61009961009461009b565b610132565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166322ebb4776040518163ffffffff1660e01b8152600401602060405180830381865afa158015610109573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061012d9190610156565b905090565b3660008037600080366000845af43d6000803e808015610151573d6000f35b3d6000fd5b60006020828403121561016857600080fd5b815173ffffffffffffffffffffffffffffffffffffffff8116811461018c57600080fd5b939250505056fea2646970667358221220956cb9b7f2102d68dd4c187f0f4645befc88c4763960da67eb7b9c04f704ffda64736f6c63430008140033";

type WalletProxyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: WalletProxyConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class WalletProxy__factory extends ContractFactory {
  constructor(...args: WalletProxyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _xChangeContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<WalletProxy> {
    return super.deploy(
      _xChangeContract,
      overrides || {},
    ) as Promise<WalletProxy>;
  }
  override getDeployTransaction(
    _xChangeContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(_xChangeContract, overrides || {});
  }
  override attach(address: string): WalletProxy {
    return super.attach(address) as WalletProxy;
  }
  override connect(signer: Signer): WalletProxy__factory {
    return super.connect(signer) as WalletProxy__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): WalletProxyInterface {
    return new utils.Interface(_abi) as WalletProxyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): WalletProxy {
    return new Contract(address, _abi, signerOrProvider) as WalletProxy;
  }
}
